version: 2.1

orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
      BE-stack-name:
        type: string
      FE-stack-name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.BE-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.FE-stack-name >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            echo $(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      - save_cache:
          paths: [frontend/node_modules_test]
          key: frontend-test
      # Your job code here
      - run:
          name: Front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      - save_cache:
          paths: [backend/node_modules_test]
          key: backend-test
      # Your job code here
      - run:
          name: Back-end tests
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      - save_cache:
          paths: [frontend/node_modules_scan]
          key: frontend-scan
      # Your job code here
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      - save_cache:
          paths: [backend/node_modules_scan]
          key: backend-scan
      # Your job code here
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"     
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Stacks[0].Outputs[?OutputKey=='InstancePublicIp'].OutputValue" \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          BE-stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          FE-stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.8-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "4d:bb:4f:63:b1:51:54:03:ed:99:e2:de:d8:7d:4e:92"
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Check inventory file
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore the backend cache
      - restore_cache:
          keys:
            - backend-build
            - backend-test
            - backend-scan
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io OR memstash.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Nodejs
          command: |
            sudo yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_16.x | sudo bash -
            sudo yum install -y nodejs
            echo "Node version: $(node --version)"
      - run:
          name: Install tar & gzip
          command: |
            sudo yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment:
          BE-stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          FE-stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.8-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "4d:bb:4f:63:b1:51:54:03:ed:99:e2:de:d8:7d:4e:92"
      # attach workspace
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Install Nodejs
          command: |
            apk add --update nodejs npm
      - run:
          name: Install tar & gzip
          command: |
            apk add --update tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment:
          BE-stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
          FE-stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-integrate
      - build-backend:
          context: slack-integrate
      - test-frontend:
          requires: [build-frontend]
          context: slack-integrate
      - test-backend:
          requires: [build-backend]
          context: slack-integrate
      - scan-backend:
          requires: [build-backend]
          context: slack-integrate
      - scan-frontend:
          requires: [build-frontend]
          context: slack-integrate
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]